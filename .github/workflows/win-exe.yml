defaults:
  run:
    shell: bash
env:
  JAVA_DIST: zulu
  JAVA_VERSION: 22.0.1+8
  OPENJFX_JMODS_AMD64: https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_windows-x64_bin-jmods.zip
  OPENJFX_JMODS_AMD64_HASH: daf8acae631c016c24cfe23f88469400274d3441dd890615a42dfb501f3eb94a
  WINFSP_MSI: https://github.com/winfsp/winfsp/releases/download/v2.0/winfsp-2.0.23075.msi
  WINFSP_UNINSTALLER: https://github.com/cryptomator/winfsp-uninstaller/releases/latest/download/winfsp-uninstaller.exe
jobs:
  allowlist-exe:
    needs:
    - publish
    uses: ./.github/workflows/av-whitelist.yml
    with:
      url: ${{ needs.publish.outputs.download-url-exe }}
  allowlist-msi:
    needs:
    - publish
    uses: ./.github/workflows/av-whitelist.yml
    with:
      url: ${{ needs.publish.outputs.download-url-msi }}
  build-exe:
    name: Build .exe installer
    needs:
    - get-version
    - build-msi
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Download .msi
      uses: actions/download-artifact@v4
      with:
        name: msi
        path: dist/win/bundle/resources
    - continue-on-error: true
      name: Strip version info from msi file name
      run: mv dist/win/bundle/resources/Cryptomator*.msi dist/win/bundle/resources/Cryptomator.msi
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        cache: maven
        check-latest: true
        distribution: ${{ env.JAVA_DIST }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      name: Generate license for exe
      run: 'mvn -B license:add-third-party "-Dlicense.thirdPartyFilename=license.rtf"
        "-Dlicense.fileTemplate=dist/win/bundle/resources/licenseTemplate.ftl" "-Dlicense.outputDirectory=dist/win/bundle/resources"
        "-Dlicense.includedScopes=compile" "-Dlicense.excludedGroups=^org\.cryptomator"
        "-Dlicense.failOnMissing=true" "-Dlicense.licenseMergesUrl=file:///${{ github.workspace
        }}/license/merges"

        '
      shell: pwsh
    - continue-on-error: true
      name: Download WinFsp
      run: 'curl --output dist/win/bundle/resources/winfsp.msi -L ${{ env.WINFSP_MSI
        }}

        '
      shell: pwsh
    - continue-on-error: true
      name: Download Legacy-WinFsp uninstaller
      run: 'curl --output dist/win/bundle/resources/winfsp-uninstaller.exe -L ${{
        env.WINFSP_UNINSTALLER }}

        '
      shell: pwsh
    - continue-on-error: true
      name: Compile to wixObj file
      run: '"${WIX}/bin/candle.exe" dist/win/bundle/bundleWithWinfsp.wxs -ext WixBalExtension
        -ext WixUtilExtension -out dist/win/bundle/ -dBundleVersion="${{ needs.get-version.outputs.semVerNum
        }}.${{ needs.get-version.outputs.revNum }}" -dBundleVendor="Skymatic GmbH"
        -dBundleCopyright="(C) 2016 - 2024 Skymatic GmbH" -dAboutUrl="https://cryptomator.org"
        -dHelpUrl="https://cryptomator.org/contact" -dUpdateUrl="https://cryptomator.org/downloads/"

        '
    - continue-on-error: true
      name: Create executable with linker
      run: '"${WIX}/bin/light.exe" -b dist/win/ dist/win/bundle/bundleWithWinfsp.wixobj
        -ext WixBalExtension -ext WixUtilExtension -out installer/unsigned/Cryptomator-Installer.exe

        '
    - continue-on-error: true
      name: Detach burn engine in preparation to sign
      run: '"${WIX}/bin/insignia.exe" -ib installer/unsigned/Cryptomator-Installer.exe
        -o tmp/engine.exe

        '
    - continue-on-error: true
      name: Codesign burn engine
      uses: skymatic/code-sign-action@v3
      with:
        certificate: ${{ secrets.WIN_CODESIGN_P12_BASE64 }}
        certificatesha1: 5FC94CE149E5B511E621F53A060AC67CBD446B3A
        description: Cryptomator Installer
        folder: tmp
        password: ${{ secrets.WIN_CODESIGN_P12_PW }}
        timestampUrl: http://timestamp.digicert.com
    - continue-on-error: true
      name: Reattach signed burn engine to installer
      run: '"${WIX}/bin/insignia.exe" -ab tmp/engine.exe installer/unsigned/Cryptomator-Installer.exe
        -o installer/Cryptomator-Installer.exe

        '
    - continue-on-error: true
      name: Codesign EXE
      uses: skymatic/code-sign-action@v3
      with:
        certificate: ${{ secrets.WIN_CODESIGN_P12_BASE64 }}
        certificatesha1: 5FC94CE149E5B511E621F53A060AC67CBD446B3A
        description: Cryptomator Installer
        folder: installer
        password: ${{ secrets.WIN_CODESIGN_P12_PW }}
        timestampUrl: http://timestamp.digicert.com
    - continue-on-error: true
      name: Add possible alpha/beta tags to installer name
      run: mv installer/Cryptomator-Installer.exe Cryptomator-${{ needs.get-version.outputs.semVerStr
        }}-x64.exe
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.RELEASES_GPG_PASSPHRASE }}
        GPG_PRIVATE_KEY: ${{ secrets.RELEASES_GPG_PRIVATE_KEY }}
      name: Create detached GPG signature with key 615D449FE6E6A235
      run: 'echo "${GPG_PRIVATE_KEY}" | gpg --batch --quiet --import

        echo "${GPG_PASSPHRASE}" | gpg --batch --quiet --passphrase-fd 0 --pinentry-mode
        loopback -u 615D449FE6E6A235 --detach-sign -a Cryptomator-*.exe

        '
    - continue-on-error: true
      name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: exe
        path: 'Cryptomator-*.exe

          Cryptomator-*.asc

          '
  build-msi:
    env:
      LOOPBACK_ALIAS: cryptomator-vault
      WIN_CONSOLE_FLAG: ''
    name: Build .msi Installer
    needs:
    - get-version
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Upgrade WIX to latest version
      run: choco install wixtoolset --version 3.14.1
      shell: pwsh
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        cache: maven
        check-latest: true
        distribution: ${{ env.JAVA_DIST }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      name: Download and extract JavaFX jmods from Gluon
      run: "curl --output jfxjmods.zip -L \"${{ env.OPENJFX_JMODS_AMD64 }}\"\nif(!(Get-FileHash\
        \ -Path jfxjmods.zip -Algorithm SHA256).Hash.ToLower().equals(\"${{ env.OPENJFX_JMODS_AMD64_HASH\
        \ }}\")) {\n  throw \"Wrong checksum of JMOD archive downloaded from ${{ env.OPENJFX_JMODS_AMD64\
        \ }}.\";\n}\nExpand-Archive -Path jfxjmods.zip -DestinationPath jfxjmods\n\
        Get-ChildItem -Path jfxjmods -Recurse -Filter \"*.jmod\" | ForEach-Object\
        \ { Move-Item -Path $_ -Destination $_.Directory.Parent}\n"
      shell: pwsh
    - continue-on-error: true
      name: Ensure major jfx version in pom and in jmods is the same
      run: "JMOD_VERSION_AMD64=$(jmod describe jfxjmods/javafx.base.jmod | head -1)\n\
        JMOD_VERSION_AMD64=${JMOD_VERSION_AMD64#*@}\nJMOD_VERSION_AMD64=${JMOD_VERSION_AMD64%%.*}\n\
        POM_JFX_VERSION=$(mvn help:evaluate \"-Dexpression=javafx.version\" -q -DforceStdout)\n\
        POM_JFX_VERSION=${POM_JFX_VERSION#*@}\nPOM_JFX_VERSION=${POM_JFX_VERSION%%.*}\n\
        \nif [ $POM_JFX_VERSION -ne $JMOD_VERSION_AMD64 ]; then\n  >&2 echo \"Major\
        \ JavaFX version in pom.xml (${POM_JFX_VERSION}) != amd64 jmod version (${JMOD_VERSION_AMD64})\"\
        \n  exit 1\nfi\n"
    - continue-on-error: true
      name: Set version
      run: mvn versions:set -DnewVersion=${{ needs.get-version.outputs.semVerStr }}
    - continue-on-error: true
      name: Run maven
      run: mvn -B clean package -Pwin -DskipTests
    - continue-on-error: true
      name: Patch target dir
      run: 'cp LICENSE.txt target

        cp target/cryptomator-*.jar target/mods

        '
    - continue-on-error: true
      name: Run jlink
      run: '${JAVA_HOME}/bin/jlink --verbose --output runtime --module-path "jfxjmods;${JAVA_HOME}/jmods"
        --add-modules java.base,java.desktop,java.instrument,java.logging,java.naming,java.net.http,java.scripting,java.sql,java.xml,javafx.base,javafx.graphics,javafx.controls,javafx.fxml,jdk.unsupported,jdk.accessibility,jdk.management.jfr
        --strip-native-commands --no-header-files --no-man-pages --strip-debug --compress
        zip-0

        '
    - continue-on-error: true
      if: ${{ inputs.isDebug }}
      name: Change win-console flag if debug is active
      run: echo "WIN_CONSOLE_FLAG=--win-console" >> $GITHUB_ENV
    - continue-on-error: true
      name: Run jpackage
      run: '${JAVA_HOME}/bin/jpackage --verbose --type app-image --runtime-image runtime
        --input target/libs --module-path target/mods --module org.cryptomator.desktop/org.cryptomator.launcher.Cryptomator
        --dest appdir --name Cryptomator --vendor "Skymatic GmbH" --copyright "(C)
        2016 - 2024 Skymatic GmbH" --app-version "${{ needs.get-version.outputs.semVerNum
        }}.${{ needs.get-version.outputs.revNum }}" --java-options "--enable-preview"
        --java-options "--enable-native-access=org.cryptomator.jfuse.win" --java-options
        "-Xss5m" --java-options "-Xmx256m" --java-options "-Dcryptomator.appVersion=\"${{
        needs.get-version.outputs.semVerStr }}\"" --java-options "-Dfile.encoding=\"utf-8\""
        --java-options "-Djava.net.useSystemProxies=true" --java-options "-Dcryptomator.logDir=\"@{localappdata}/Cryptomator\""
        --java-options "-Dcryptomator.pluginDir=\"@{appdata}/Cryptomator/Plugins\""
        --java-options "-Dcryptomator.settingsPath=\"@{appdata}/Cryptomator/settings.json;@{userhome}/AppData/Roaming/Cryptomator/settings.json\""
        --java-options "-Dcryptomator.p12Path=\"@{appdata}/Cryptomator/key.p12;@{userhome}/AppData/Roaming/Cryptomator/key.p12\""
        --java-options "-Dcryptomator.ipcSocketPath=\"@{localappdata}/Cryptomator/ipc.socket\""
        --java-options "-Dcryptomator.mountPointsDir=\"@{userhome}/Cryptomator\""
        --java-options "-Dcryptomator.loopbackAlias=\"${{ env.LOOPBACK_ALIAS }}\""
        --java-options "-Dcryptomator.showTrayIcon=true" --java-options "-Dcryptomator.buildNumber=\"msi-${{
        needs.get-version.outputs.revNum }}\"" --java-options "-Dcryptomator.integrationsWin.autoStartShellLinkName=\"Cryptomator\""
        --java-options "-Dcryptomator.integrationsWin.keychainPaths=\"@{appdata}/Cryptomator/keychain.json;@{userhome}/AppData/Roaming/Cryptomator/keychain.json\""
        --java-options "-Djavafx.verbose=${{ inputs.isDebug }}" --resource-dir dist/win/resources
        --icon dist/win/resources/Cryptomator.ico ${WIN_CONSOLE_FLAG}

        '
    - continue-on-error: true
      name: Patch Application Directory
      run: 'cp dist/win/contrib/* appdir/Cryptomator

        '
    - continue-on-error: true
      name: Set LOOPBACK_ALIAS in patchWebDAV.bat
      run: "$patchScript = \"appdir\\Cryptomator\\patchWebDAV.bat\"\ntry {\n  (Get-Content\
        \ $patchScript ) -replace '::REPLACE ME', \"SET LOOPBACK_ALIAS=`\"${{ env.LOOPBACK_ALIAS}}`\"\
        \" | Set-Content $patchScript\n} catch {\n  Write-Host \"Failed to set LOOPBACK_ALIAS\
        \ for patchWebDAV.bat\"\n  exit 1\n}\n"
      shell: pwsh
    - continue-on-error: true
      name: Fix permissions
      run: attrib -r appdir/Cryptomator/Cryptomator.exe
      shell: pwsh
    - continue-on-error: true
      name: Extract jars with DLLs for Codesigning
      run: "Add-Type -AssemblyName \"System.io.compression.filesystem\"\n$jarFolder\
        \ = Resolve-Path \".\\appdir\\Cryptomator\\app\\mods\"\n$jarExtractDir = New-Item\
        \ -Path \".\\appdir\\jar-extract\" -ItemType Directory\n\n#for all jars inspect\n\
        Get-ChildItem -Path $jarFolder -Filter \"*.jar\" | ForEach-Object {\n    $jar\
        \ = [Io.compression.zipfile]::OpenRead($_.FullName)\n    if (@($jar.Entries\
        \ | Where-Object {$_.Name.ToString().EndsWith(\".dll\")} | Select-Object -First\
        \ 1).Count -gt 0) {\n        #jars containing dlls extract\n        Set-Location\
        \ $jarExtractDir\n        Expand-Archive -Path $_.FullName\n    }\n    $jar.Dispose()\n\
        }\n"
      shell: pwsh
    - continue-on-error: true
      name: Extract wixhelper.dll for Codesigning
      run: 'New-Item -Path appdir/jpackage-jmod -ItemType Directory

        & $env:JAVA_HOME\bin\jmod.exe extract --dir jpackage-jmod "${env:JAVA_HOME}\jmods\jdk.jpackage.jmod"

        Get-ChildItem -Recurse -Path "jpackage-jmod" -File wixhelper.dll | Select-Object
        -Last 1 | Copy-Item -Destination "appdir"

        '
      shell: pwsh
    - continue-on-error: true
      name: Codesign
      uses: skymatic/code-sign-action@v3
      with:
        certificate: ${{ secrets.WIN_CODESIGN_P12_BASE64 }}
        certificatesha1: 5FC94CE149E5B511E621F53A060AC67CBD446B3A
        description: Cryptomator
        folder: appdir
        password: ${{ secrets.WIN_CODESIGN_P12_PW }}
        recursive: true
        timestampUrl: http://timestamp.digicert.com
    - continue-on-error: true
      name: Replace DLLs inside jars with signed ones
      run: "$jarExtractDir = Resolve-Path \".\\appdir\\jar-extract\"\n$jarFolder =\
        \ Resolve-Path \".\\appdir\\Cryptomator\\app\\mods\"\nGet-ChildItem -Path\
        \ $jarExtractDir | ForEach-Object {\n    $jarName = $_.Name\n    $jarFile\
        \ = \"${jarFolder}\\${jarName}.jar\"\n    Set-Location $_\n    Get-ChildItem\
        \ -Path $_ -Recurse -File \"*.dll\" | ForEach-Object {\n        # update jar\
        \ with signed dll\n        jar --file=\"$jarFile\" --update $(Resolve-Path\
        \ -Relative -Path $_)\n    }\n}\n"
      shell: pwsh
    - continue-on-error: true
      name: Generate license for MSI
      run: 'mvn -B license:add-third-party "-Dlicense.thirdPartyFilename=license.rtf"
        "-Dlicense.outputDirectory=dist/win/resources" "-Dlicense.fileTemplate=dist/win/resources/licenseTemplate.ftl"
        "-Dlicense.includedScopes=compile" "-Dlicense.excludedGroups=^org\.cryptomator"
        "-Dlicense.failOnMissing=true" "-Dlicense.licenseMergesUrl=file:///${{ github.workspace
        }}/license/merges"

        '
      shell: pwsh
    - continue-on-error: true
      env:
        JP_WIXHELPER_DIR: ${{ github.workspace }}\appdir
        JP_WIXWIZARD_RESOURCES: ${{ github.workspace }}/dist/win/resources
      name: Create MSI
      run: '${JAVA_HOME}/bin/jpackage --verbose --type msi --win-upgrade-uuid bda45523-42b1-4cae-9354-a45475ed4775
        --app-image appdir/Cryptomator --dest installer --name Cryptomator --vendor
        "Skymatic GmbH" --copyright "(C) 2016 - 2024 Skymatic GmbH" --app-version
        "${{ needs.get-version.outputs.semVerNum }}.${{ needs.get-version.outputs.revNum}}"
        --win-menu --win-dir-chooser --win-shortcut-prompt --win-update-url "https:\\cryptomator.org\downloads"
        --win-menu-group Cryptomator --resource-dir dist/win/resources --license-file
        dist/win/resources/license.rtf --file-associations dist/win/resources/FAvaultFile.properties

        '
    - continue-on-error: true
      name: Codesign MSI
      uses: skymatic/code-sign-action@v3
      with:
        certificate: ${{ secrets.WIN_CODESIGN_P12_BASE64 }}
        certificatesha1: 5FC94CE149E5B511E621F53A060AC67CBD446B3A
        description: Cryptomator Installer
        folder: installer
        password: ${{ secrets.WIN_CODESIGN_P12_PW }}
        timestampUrl: http://timestamp.digicert.com
    - continue-on-error: true
      name: Add possible alpha/beta tags to installer name
      run: mv installer/Cryptomator-*.msi Cryptomator-${{ needs.get-version.outputs.semVerStr
        }}-x64.msi
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.RELEASES_GPG_PASSPHRASE }}
        GPG_PRIVATE_KEY: ${{ secrets.RELEASES_GPG_PRIVATE_KEY }}
      name: Create detached GPG signature with key 615D449FE6E6A235
      run: 'echo "${GPG_PRIVATE_KEY}" | gpg --batch --quiet --import

        echo "${GPG_PASSPHRASE}" | gpg --batch --quiet --passphrase-fd 0 --pinentry-mode
        loopback -u 615D449FE6E6A235 --detach-sign -a Cryptomator-*.msi

        '
    - continue-on-error: true
      name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: msi
        path: 'Cryptomator-*.msi

          Cryptomator-*.asc

          '
  get-version:
    uses: ./.github/workflows/get-version.yml
    with:
      version: ${{ inputs.version }}
  notify-winget:
    if: needs.get-version.outputs.versionType == 'stable'
    name: Notify for winget-release
    needs:
    - publish
    - get-version
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        MSG_MINIMAL: true
        SLACK_CHANNEL: cryptomator-desktop
        SLACK_FOOTER: false
        SLACK_ICON: false
        SLACK_ICON_EMOJI: ':bot:'
        SLACK_MESSAGE: Ready to <https://github.com/${{ github.repository }}/actions/workflows/winget.yml|
          release to winget>.
        SLACK_TITLE: MSI of ${{ github.event.repository.name }} ${{ github.event.release.tag_name
          }} published.
        SLACK_USERNAME: Cryptobot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
  publish:
    if: startsWith(github.ref, 'refs/tags/') && github.event.action == 'published'
    name: Publish installers to the github release
    needs:
    - build-msi
    - build-exe
    outputs:
      download-url-exe: ${{ fromJSON(steps.publish.outputs.assets)[1].browser_download_url
        }}
      download-url-msi: ${{ fromJSON(steps.publish.outputs.assets)[0].browser_download_url
        }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download installers
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - continue-on-error: true
      id: publish
      name: Publish .msi on GitHub Releases
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        files: '*.msi

          *.exe

          *.asc

          '
        token: ${{ secrets.CRYPTOBOT_RELEASE_TOKEN }}
name: Build Windows Installer
on:
  repository_dispatch:
    types: trigger-ga___win-exe.yml
