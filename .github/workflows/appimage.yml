env:
  JAVA_DIST: zulu
  JAVA_VERSION: 22.0.1+8
jobs:
  build:
    name: Build AppImage
    needs:
    - get-version
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        cache: maven
        check-latest: true
        distribution: ${{ env.JAVA_DIST }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      id: download-jmods
      name: Download OpenJFX jmods
      run: 'curl -L ${{ matrix.openjfx-url }} -o openjfx-jmods.zip

        echo "${{ matrix.openjfx-sha }}  openjfx-jmods.zip" | shasum -a256 --check

        mkdir -p openjfx-jmods

        unzip -j openjfx-jmods.zip \*/javafx.base.jmod \*/javafx.controls.jmod \*/javafx.fxml.jmod
        \*/javafx.graphics.jmod -d openjfx-jmods

        '
    - continue-on-error: true
      name: Ensure major jfx version in pom and in jmods is the same
      run: "JMOD_VERSION=$(jmod describe openjfx-jmods/javafx.base.jmod | head -1)\n\
        JMOD_VERSION=${JMOD_VERSION#*@}\nJMOD_VERSION=${JMOD_VERSION%%.*}\nPOM_JFX_VERSION=$(mvn\
        \ help:evaluate \"-Dexpression=javafx.version\" -q -DforceStdout)\nPOM_JFX_VERSION=${POM_JFX_VERSION#*@}\n\
        POM_JFX_VERSION=${POM_JFX_VERSION%%.*}\n\nif [ $POM_JFX_VERSION -ne $JMOD_VERSION_AMD64\
        \ ]; then\n  >&2 echo \"Major JavaFX version in pom.xml (${POM_JFX_VERSION})\
        \ != amd64 jmod version (${JMOD_VERSION})\"\n  exit 1\nfi\n"
    - continue-on-error: true
      name: Set version
      run: mvn versions:set -DnewVersion=${{ needs.get-version.outputs.semVerStr }}
    - continue-on-error: true
      name: Run maven
      run: mvn -B clean package -Plinux -DskipTests
    - continue-on-error: true
      name: Patch target dir
      run: 'cp LICENSE.txt target

        cp target/cryptomator-*.jar target/mods

        '
    - continue-on-error: true
      name: Run jlink
      run: '${JAVA_HOME}/bin/jlink --verbose --output runtime --module-path "${JAVA_HOME}/jmods:openjfx-jmods"
        --add-modules java.base,java.desktop,java.instrument,java.logging,java.naming,java.net.http,java.scripting,java.sql,java.xml,javafx.base,javafx.graphics,javafx.controls,javafx.fxml,jdk.unsupported,jdk.security.auth,jdk.accessibility,jdk.management.jfr,jdk.net
        --strip-native-commands --no-header-files --no-man-pages --strip-debug --compress
        zip-0

        '
    - continue-on-error: true
      name: Run jpackage
      run: '${JAVA_HOME}/bin/jpackage --verbose --type app-image --runtime-image runtime
        --input target/libs --module-path target/mods --module org.cryptomator.desktop/org.cryptomator.launcher.Cryptomator
        --dest appdir --name Cryptomator --vendor "Skymatic GmbH" --copyright "(C)
        2016 - 2024 Skymatic GmbH" --app-version "${{  needs.get-version.outputs.semVerNum
        }}.${{  needs.get-version.outputs.revNum }}" --java-options "--enable-preview"
        --java-options "--enable-native-access=org.cryptomator.jfuse.linux.amd64,org.cryptomator.jfuse.linux.aarch64,org.purejava.appindicator"
        --java-options "-Xss5m" --java-options "-Xmx256m" --java-options "-Dcryptomator.appVersion=\"${{  needs.get-version.outputs.semVerStr
        }}\"" --java-options "-Dfile.encoding=\"utf-8\"" --java-options "-Djava.net.useSystemProxies=true"
        --java-options "-Dcryptomator.logDir=\"@{userhome}/.local/share/Cryptomator/logs\""
        --java-options "-Dcryptomator.pluginDir=\"@{userhome}/.local/share/Cryptomator/plugins\""
        --java-options "-Dcryptomator.settingsPath=\"@{userhome}/.config/Cryptomator/settings.json:@{userhome}/.Cryptomator/settings.json\""
        --java-options "-Dcryptomator.p12Path=\"@{userhome}/.config/Cryptomator/key.p12\""
        --java-options "-Dcryptomator.ipcSocketPath=\"@{userhome}/.config/Cryptomator/ipc.socket\""
        --java-options "-Dcryptomator.mountPointsDir=\"@{userhome}/.local/share/Cryptomator/mnt\""
        --java-options "-Dcryptomator.showTrayIcon=true" --java-options "-Dcryptomator.integrationsLinux.trayIconsDir=\"@{appdir}/usr/share/icons/hicolor/symbolic/apps\""
        --java-options "-Dcryptomator.buildNumber=\"appimage-${{  needs.get-version.outputs.revNum
        }}\"" --add-launcher Cryptomator-gtk2=launcher-gtk2.properties --resource-dir
        dist/linux/resources

        '
    - continue-on-error: true
      name: Patch Cryptomator.AppDir
      run: 'mv appdir/Cryptomator Cryptomator.AppDir

        cp -r dist/linux/appimage/resources/AppDir/* Cryptomator.AppDir/

        cp dist/linux/common/org.cryptomator.Cryptomator256.png Cryptomator.AppDir/usr/share/icons/hicolor/256x256/apps/org.cryptomator.Cryptomator.png

        cp dist/linux/common/org.cryptomator.Cryptomator512.png Cryptomator.AppDir/usr/share/icons/hicolor/512x512/apps/org.cryptomator.Cryptomator.png

        cp dist/linux/common/org.cryptomator.Cryptomator.svg Cryptomator.AppDir/usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg

        cp dist/linux/common/org.cryptomator.Cryptomator.tray.svg Cryptomator.AppDir/usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.tray.svg

        cp dist/linux/common/org.cryptomator.Cryptomator.tray-unlocked.svg Cryptomator.AppDir/usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.tray-unlocked.svg

        cp dist/linux/common/org.cryptomator.Cryptomator.tray.svg Cryptomator.AppDir/usr/share/icons/hicolor/symbolic/apps/org.cryptomator.Cryptomator.tray-symbolic.svg

        cp dist/linux/common/org.cryptomator.Cryptomator.tray-unlocked.svg Cryptomator.AppDir/usr/share/icons/hicolor/symbolic/apps/org.cryptomator.Cryptomator.tray-unlocked-symbolic.svg

        cp dist/linux/common/org.cryptomator.Cryptomator.metainfo.xml Cryptomator.AppDir/usr/share/metainfo/org.cryptomator.Cryptomator.metainfo.xml

        cp dist/linux/common/org.cryptomator.Cryptomator.desktop Cryptomator.AppDir/usr/share/applications/org.cryptomator.Cryptomator.desktop

        cp dist/linux/common/application-vnd.cryptomator.vault.xml Cryptomator.AppDir/usr/share/mime/packages/application-vnd.cryptomator.vault.xml

        ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg
        Cryptomator.AppDir/org.cryptomator.Cryptomator.svg

        ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg
        Cryptomator.AppDir/Cryptomator.svg

        ln -s usr/share/icons/hicolor/scalable/apps/org.cryptomator.Cryptomator.svg
        Cryptomator.AppDir/.DirIcon

        ln -s usr/share/applications/org.cryptomator.Cryptomator.desktop Cryptomator.AppDir/Cryptomator.desktop

        ln -s bin/cryptomator.sh Cryptomator.AppDir/AppRun

        '
    - continue-on-error: true
      name: Download AppImageKit
      run: 'curl -L https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-${{
        matrix.appimage-suffix }}.AppImage -o appimagetool.AppImage

        chmod +x appimagetool.AppImage

        ./appimagetool.AppImage --appimage-extract

        '
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.RELEASES_GPG_PASSPHRASE }}
        GPG_PRIVATE_KEY: ${{ secrets.RELEASES_GPG_PRIVATE_KEY }}
      name: Prepare GPG-Agent for signing with key 615D449FE6E6A235
      run: 'echo "${GPG_PRIVATE_KEY}" | gpg --batch --quiet --import

        echo "${GPG_PASSPHRASE}" | gpg --batch --quiet --passphrase-fd 0 --pinentry-mode
        loopback -u 615D449FE6E6A235 --dry-run --sign README.md

        '
    - continue-on-error: true
      name: Build AppImage
      run: './squashfs-root/AppRun Cryptomator.AppDir cryptomator-${{  needs.get-version.outputs.semVerStr
        }}-${{ matrix.appimage-suffix }}.AppImage -u ''gh-releases-zsync|cryptomator|cryptomator|latest|cryptomator-*-${{
        matrix.appimage-suffix }}.AppImage.zsync'' --sign --sign-key=615D449FE6E6A235
        --sign-args="--batch --pinentry-mode loopback"

        '
    - continue-on-error: true
      name: Create detached GPG signatures
      run: 'gpg --batch --quiet --passphrase-fd 0 --pinentry-mode loopback -u 615D449FE6E6A235
        --detach-sign -a cryptomator-*.AppImage

        gpg --batch --quiet --passphrase-fd 0 --pinentry-mode loopback -u 615D449FE6E6A235
        --detach-sign -a cryptomator-*.AppImage.zsync

        '
    - continue-on-error: true
      name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: appimage-${{ matrix.appimage-suffix }}
        path: 'cryptomator-*.AppImage

          cryptomator-*.AppImage.zsync

          cryptomator-*.asc

          '
    - continue-on-error: true
      if: startsWith(github.ref, 'refs/tags/') && github.event.action == 'published'
      name: Publish AppImage on GitHub Releases
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        files: 'cryptomator-*.AppImage

          cryptomator-*.zsync

          cryptomator-*.asc'
        token: ${{ secrets.CRYPTOBOT_RELEASE_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - appimage-suffix: x86_64
          openjfx-sha: 7baed11ca56d5fee85995fa6612d4299f1e8b7337287228f7f12fd50407c56f8
          openjfx-url: https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_linux-x64_bin-jmods.zip
          os: ubuntu-latest
        - appimage-suffix: aarch64
          openjfx-sha: 871e7b9d7af16aef2e55c1b7830d0e0b2503b13dd8641374ba7e55ecb81d2ef9
          openjfx-url: https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_linux-aarch64_bin-jmods.zip
          os:
          - self-hosted
          - Linux
          - ARM64
  get-version:
    uses: ./.github/workflows/get-version.yml
    with:
      version: ${{ inputs.version }}
name: Build AppImage
on:
  repository_dispatch:
    types: trigger-ga___appimage.yml
