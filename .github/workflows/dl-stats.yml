jobs:
  report-download-stats:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: get-stats
      name: Get download count of latest releases
      uses: actions/github-script@v7
      with:
        script: "const query = `query($owner:String!, $name:String!) {\n  repository(owner:$owner,\
          \ name:$name){\n    releases(first: 10, orderBy: {field: CREATED_AT, direction:\
          \ DESC}) {\n      nodes {\n        isPrerelease\n        tagName\n     \
          \   releaseAssets(first: 20) {\n          nodes {\n            name\n  \
          \          downloadCount\n          }\n        }\n      }\n    }\n  }\n\
          }`;\nconst variables = {\n  owner: context.repo.owner,\n  name: context.repo.repo\n\
          }\nreturn await github.graphql(query, variables)\n"
    - continue-on-error: true
      env:
        INTERVAL: 900
        JSON_DATA: ${{ steps.get-stats.outputs.result }}
      id: transform-stats
      name: Transform Results
      run: 'TIME=$(($(date +%s) / $INTERVAL * $INTERVAL))

        echo ${JSON_DATA} | jq --arg TIME "$TIME" --arg INTERVAL "$INTERVAL" -c ''.repository.releases.nodes[]
        | select(.isPrerelease == false) | .tagName as $tagName | .releaseAssets.nodes[]
        | {filename: .name, downloads: .downloadCount, release: $tagName, time: ($TIME|tonumber),
        interval: ($INTERVAL|tonumber)}'' > input.json


        jq -c ''select(.filename|endswith("-x86_64.AppImage")) | {name: "github.releases.downloads",
        tags: ["file=AppImage", "version=\(.release)", "arch=amd64"], value: .downloads,
        interval: .interval, time: .time}'' input.json >> output.json

        jq -c ''select(.filename|endswith("_amd64.deb")) | {name: "github.releases.downloads",
        tags: ["file=deb", "version=\(.release)", "arch=amd64"], value: .downloads,
        interval: .interval, time: .time}'' input.json >> output.json

        jq -c ''select(.filename|endswith("-x64.msi")) | {name: "github.releases.downloads",
        tags: ["file=msi", "version=\(.release)", "arch=amd64"], value: .downloads,
        interval: .interval, time: .time}'' input.json >> output.json

        jq -c ''select(.filename|endswith("-x64.exe")) | {name: "github.releases.downloads",
        tags: ["file=exe", "version=\(.release)", "arch=amd64"], value: .downloads,
        interval: .interval, time: .time}'' input.json >> output.json

        jq -c ''select(.filename|endswith("-arm64.dmg")) | {name: "github.releases.downloads",
        tags: ["file=dmg", "version=\(.release)", "arch=arm64"], value: .downloads,
        interval: .interval, time: .time}'' input.json >> output.json

        jq -c ''select(.filename|endswith(".dmg")) | select(.filename|endswith("-arm64.dmg")|not)
        | {name: "github.releases.downloads", tags: ["file=dmg", "version=\(.release)",
        "arch=amd64"], value: .downloads, interval: .interval, time: .time}'' input.json
        >> output.json


        RESULT=$(jq -s -c "." output.json)

        echo "result=${RESULT}" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      name: Upload Results
      uses: fjogeleit/http-request-action@v1
      with:
        bearerToken: ${{ secrets.GRAFANA_GRAPHITE_TOKEN }}
        contentType: application/json
        data: ${{ steps.transform-stats.outputs.result }}
        method: POST
        url: https://graphite-us-central1.grafana.net/metrics
name: Report Download Stats
on:
  repository_dispatch:
    types: trigger-ga___dl-stats.yml
