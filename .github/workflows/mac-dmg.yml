env:
  JAVA_DIST: zulu
  JAVA_VERSION: 22.0.1+8
jobs:
  build:
    name: Build Cryptomator.app for ${{ matrix.output-suffix }}
    needs:
    - get-version
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        architecture: ${{ matrix.architecture }}
        cache: maven
        check-latest: true
        distribution: ${{ env.JAVA_DIST }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      id: download-jmods
      name: Download OpenJFX jmods
      run: 'curl -L ${{ matrix.openjfx-url }} -o openjfx-jmods.zip

        echo "${{ matrix.openjfx-sha }} *openjfx-jmods.zip" | shasum -a256 --check

        mkdir -p openjfx-jmods/

        unzip -jo openjfx-jmods.zip \*/javafx.base.jmod \*/javafx.controls.jmod \*/javafx.fxml.jmod
        \*/javafx.graphics.jmod -d openjfx-jmods

        '
    - continue-on-error: true
      name: Ensure major jfx version in pom and in jmods is the same
      run: "JMOD_VERSION=$(jmod describe openjfx-jmods/javafx.base.jmod | head -1)\n\
        JMOD_VERSION=${JMOD_VERSION#*@}\nJMOD_VERSION=${JMOD_VERSION%%.*}\nPOM_JFX_VERSION=$(mvn\
        \ help:evaluate \"-Dexpression=javafx.version\" -q -DforceStdout)\nPOM_JFX_VERSION=${POM_JFX_VERSION#*@}\n\
        POM_JFX_VERSION=${POM_JFX_VERSION%%.*}\n\nif [ \"${POM_JFX_VERSION}\" -ne\
        \ \"${JMOD_VERSION}\" ]; then\n  >&2 echo \"Major JavaFX version in pom.xml\
        \ (${POM_JFX_VERSION}) != jmod version (${JMOD_VERSION})\"\n  exit 1\nfi\n"
    - continue-on-error: true
      name: Set version
      run: mvn versions:set -DnewVersion=${{ needs.get-version.outputs.semVerStr }}
    - continue-on-error: true
      name: Run maven
      run: mvn -B clean package -Pmac -DskipTests
    - continue-on-error: true
      name: Patch target dir
      run: 'cp LICENSE.txt target

        cp target/cryptomator-*.jar target/mods

        '
    - continue-on-error: true
      name: Run jlink
      run: '${JAVA_HOME}/bin/jlink --verbose --output runtime --module-path "${JAVA_HOME}/jmods:openjfx-jmods"
        --add-modules java.base,java.desktop,java.instrument,java.logging,java.naming,java.net.http,java.scripting,java.sql,java.xml,javafx.base,javafx.graphics,javafx.controls,javafx.fxml,jdk.unsupported,jdk.accessibility,jdk.management.jfr
        --strip-native-commands --no-header-files --no-man-pages --strip-debug --compress
        zip-0

        '
    - continue-on-error: true
      name: Run jpackage
      run: '${JAVA_HOME}/bin/jpackage --verbose --type app-image --runtime-image runtime
        --input target/libs --module-path target/mods --module org.cryptomator.desktop/org.cryptomator.launcher.Cryptomator
        --dest appdir --name Cryptomator --vendor "Skymatic GmbH" --copyright "(C)
        2016 - 2024 Skymatic GmbH" --app-version "${{ needs.get-version.outputs.semVerNum
        }}" --java-options "--enable-preview" --java-options "--enable-native-access=org.cryptomator.jfuse.mac"
        --java-options "-Xss5m" --java-options "-Xmx256m" --java-options "-Dfile.encoding=\"utf-8\""
        --java-options "-Djava.net.useSystemProxies=true" --java-options "-Dapple.awt.enableTemplateImages=true"
        --java-options "-Dsun.java2d.metal=true" --java-options "-Dcryptomator.appVersion=\"${{
        needs.get-version.outputs.semVerStr }}\"" --java-options "-Dcryptomator.logDir=\"@{userhome}/Library/Logs/Cryptomator\""
        --java-options "-Dcryptomator.pluginDir=\"@{userhome}/Library/Application
        Support/Cryptomator/Plugins\"" --java-options "-Dcryptomator.settingsPath=\"@{userhome}/Library/Application
        Support/Cryptomator/settings.json\"" --java-options "-Dcryptomator.p12Path=\"@{userhome}/Library/Application
        Support/Cryptomator/key.p12\"" --java-options "-Dcryptomator.ipcSocketPath=\"@{userhome}/Library/Application
        Support/Cryptomator/ipc.socket\"" --java-options "-Dcryptomator.integrationsMac.keychainServiceName=\"Cryptomator\""
        --java-options "-Dcryptomator.mountPointsDir=\"@{userhome}/Library/Application
        Support/Cryptomator/mnt\"" --java-options "-Dcryptomator.showTrayIcon=true"
        --java-options "-Dcryptomator.buildNumber=\"dmg-${{ needs.get-version.outputs.revNum
        }}\"" --mac-package-identifier org.cryptomator --resource-dir dist/mac/resources

        '
    - continue-on-error: true
      env:
        REVISION_NO: ${{ needs.get-version.outputs.revNum }}
        VERSION_NO: ${{ needs.get-version.outputs.semVerNum }}
      name: Patch Cryptomator.app
      run: 'mv appdir/Cryptomator.app Cryptomator.app

        mv dist/mac/resources/Cryptomator-Vault.icns Cryptomator.app/Contents/Resources/

        sed -i '''' "s|###BUNDLE_SHORT_VERSION_STRING###|${VERSION_NO}|g" Cryptomator.app/Contents/Info.plist

        sed -i '''' "s|###BUNDLE_VERSION###|${REVISION_NO}|g" Cryptomator.app/Contents/Info.plist

        '
    - continue-on-error: true
      name: Generate license for dmg
      run: 'mvn -B license:add-third-party -Dlicense.thirdPartyFilename=license.rtf
        -Dlicense.outputDirectory=dist/mac/dmg/resources -Dlicense.fileTemplate=dist/mac/dmg/resources/licenseTemplate.ftl
        -Dlicense.includedScopes=compile -Dlicense.excludedGroups=^org\.cryptomator
        -Dlicense.failOnMissing=true -Dlicense.licenseMergesUrl=file://${{ github.workspace
        }}/license/merges

        '
    - continue-on-error: true
      env:
        CODESIGN_P12_BASE64: ${{ secrets.MACOS_CODESIGN_P12_BASE64 }}
        CODESIGN_P12_PW: ${{ secrets.MACOS_CODESIGN_P12_PW }}
        CODESIGN_TMP_KEYCHAIN_PW: ${{ secrets.MACOS_CODESIGN_TMP_KEYCHAIN_PW }}
      name: Install codesign certificate
      run: '# create variables

        CERTIFICATE_PATH=$RUNNER_TEMP/codesign.p12

        KEYCHAIN_PATH=$RUNNER_TEMP/codesign.keychain-db


        # import certificate and provisioning profile from secrets

        echo -n "$CODESIGN_P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH


        # create temporary keychain

        security create-keychain -p "$CODESIGN_TMP_KEYCHAIN_PW" $KEYCHAIN_PATH

        security set-keychain-settings -lut 900 $KEYCHAIN_PATH

        security unlock-keychain -p "$CODESIGN_TMP_KEYCHAIN_PW" $KEYCHAIN_PATH


        # import certificate to keychain

        security import $CERTIFICATE_PATH -P "$CODESIGN_P12_PW" -A -t cert -f pkcs12
        -k $KEYCHAIN_PATH

        security list-keychain -d user -s $KEYCHAIN_PATH

        '
    - continue-on-error: true
      env:
        CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}
      name: Codesign
      run: "echo \"Codesigning jdk files...\"\nfind Cryptomator.app/Contents/runtime/Contents/Home/lib/\
        \ -name '*.dylib' -exec codesign --force -s ${CODESIGN_IDENTITY} {} \\;\n\
        find Cryptomator.app/Contents/runtime/Contents/Home/lib/ -name 'jspawnhelper'\
        \ -exec codesign --force -o runtime -s ${CODESIGN_IDENTITY} {} \\;\necho \"\
        Codesigning jar contents...\"\nfind Cryptomator.app/Contents/runtime/Contents/MacOS\
        \ -name '*.dylib' -exec codesign --force -s ${CODESIGN_IDENTITY} {} \\;\n\
        for JAR_PATH in `find Cryptomator.app -name \"*.jar\"`; do\n  if [[ `unzip\
        \ -l ${JAR_PATH} | grep '.dylib\\|.jnilib'` ]]; then\n    JAR_FILENAME=$(basename\
        \ ${JAR_PATH})\n    OUTPUT_PATH=${JAR_PATH%.*}\n    echo \"Codesigning libs\
        \ in ${JAR_FILENAME}...\"\n    unzip -q ${JAR_PATH} -d ${OUTPUT_PATH}\n  \
        \  find ${OUTPUT_PATH} -name '*.dylib' -exec codesign --force -s ${CODESIGN_IDENTITY}\
        \ {} \\;\n    find ${OUTPUT_PATH} -name '*.jnilib' -exec codesign --force\
        \ -s ${CODESIGN_IDENTITY} {} \\;\n    rm ${JAR_PATH}\n    pushd ${OUTPUT_PATH}\
        \ > /dev/null\n    zip -qr ../${JAR_FILENAME} *\n    popd > /dev/null\n  \
        \  rm -r ${OUTPUT_PATH}\n  fi\ndone\necho \"Codesigning Cryptomator.app...\"\
        \ncodesign --force --deep --entitlements dist/mac/Cryptomator.entitlements\
        \ -o runtime -s ${CODESIGN_IDENTITY} Cryptomator.app\n"
    - continue-on-error: true
      name: Prepare .dmg contents
      run: 'mkdir dmg

        mv Cryptomator.app dmg

        cp dist/mac/dmg/resources/${{ matrix.fuse-lib }}.webloc dmg

        ls -l dmg

        '
    - continue-on-error: true
      name: Install create-dmg
      run: 'brew install create-dmg

        create-dmg --help

        '
    - continue-on-error: true
      env:
        VERSION_NO: ${{ needs.get-version.outputs.semVerNum }}
      name: Create .dmg
      run: 'create-dmg --volname Cryptomator --volicon "dist/mac/dmg/resources/Cryptomator-Volume.icns"
        --background "dist/mac/dmg/resources/Cryptomator-${{ matrix.fuse-lib }}-background.tiff"
        --window-pos 400 100 --window-size 640 694 --icon-size 128 --icon "Cryptomator.app"
        128 245 --hide-extension "Cryptomator.app" --icon "${{ matrix.fuse-lib }}.webloc"
        320 501 --hide-extension "${{ matrix.fuse-lib }}.webloc" --app-drop-link 512
        245 --eula "dist/mac/dmg/resources/license.rtf" --icon ".background" 128 758
        --icon ".VolumeIcon.icns" 512 758 Cryptomator-${VERSION_NO}-${{ matrix.output-suffix
        }}.dmg dmg

        '
    - continue-on-error: true
      if: startsWith(github.ref, 'refs/tags/') || inputs.notarize
      name: Notarize .dmg
      uses: cocoalibs/xcode-notarization-action@v1
      with:
        app-path: Cryptomator-*.dmg
        apple-id: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
        password: ${{ secrets.MACOS_NOTARIZATION_PW }}
        team-id: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
        xcode-path: ${{ matrix.xcode-path }}
    - continue-on-error: true
      name: Add possible alpha/beta tags to installer name
      run: mv Cryptomator-*.dmg Cryptomator-${{ needs.get-version.outputs.semVerStr
        }}-${{ matrix.output-suffix }}.dmg
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.RELEASES_GPG_PASSPHRASE }}
        GPG_PRIVATE_KEY: ${{ secrets.RELEASES_GPG_PRIVATE_KEY }}
      name: Create detached GPG signature with key 615D449FE6E6A235
      run: 'echo "${GPG_PRIVATE_KEY}" | gpg --batch --quiet --import

        echo "${GPG_PASSPHRASE}" | gpg --batch --quiet --passphrase-fd 0 --pinentry-mode
        loopback -u 615D449FE6E6A235 --detach-sign -a Cryptomator-*.dmg

        '
    - continue-on-error: true
      if: ${{ always() }}
      name: Clean up codesign certificate
      run: security delete-keychain $RUNNER_TEMP/codesign.keychain-db
    - continue-on-error: true
      name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: dmg-${{ matrix.output-suffix }}
        path: 'Cryptomator-*.dmg

          Cryptomator-*.asc

          '
    - continue-on-error: true
      if: startsWith(github.ref, 'refs/tags/') && github.event.action == 'published'
      name: Publish dmg on GitHub Releases
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        files: 'Cryptomator-*.dmg

          Cryptomator-*.asc

          '
        token: ${{ secrets.CRYPTOBOT_RELEASE_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - architecture: x64
          fuse-lib: macFUSE
          openjfx-sha: bd6abab20da73d5a968dcf2fd915d81b5fb919340e3bb84979ee9a888a829939
          openjfx-url: https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_osx-x64_bin-jmods.zip
          os: macos-11
          output-suffix: x64
          xcode-path: /Applications/Xcode_13.2.1.app
        - architecture: aarch64
          fuse-lib: FUSE-T
          openjfx-sha: 7afaa1c57a6cc3c384d636e597b9a5364693e2db4aaec0a6e63d2fa964400b58
          openjfx-url: https://download2.gluonhq.com/openjfx/21.0.1/openjfx-21.0.1_osx-aarch64_bin-jmods.zip
          os:
          - self-hosted
          - macOS
          - ARM64
          output-suffix: arm64
          xcode-path: /Applications/Xcode_13.2.1.app
  get-version:
    uses: ./.github/workflows/get-version.yml
    with:
      version: ${{ inputs.version }}
name: Build macOS .dmg
on:
  repository_dispatch:
    types: trigger-ga___mac-dmg.yml
